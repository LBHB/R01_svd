"""
Compare decoding results for the raw data to the simulated data
with independent noise, shared noise, pupil-only noise (generated by 
SVD in latent_var_sim.py)
"""
from settings import DIR
import scipy.stats as ss
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl
mpl.rcParams['axes.spines.right'] = False
mpl.rcParams['axes.spines.top'] = False
mpl.rcParams['pdf.fonttype'] = 42

# LOAD RESULTS FOR RAW DATA / EACH SIMULATION
df = pd.read_pickle(DIR + 'results/res.pickle')
df.index = df.pair
df = df[df.batch.isin([324, 325])]
df_psth = pd.read_pickle(DIR + 'results/res_predOnly.pickle')
df_psth.index = df_psth.pair
df_ind = pd.read_pickle(DIR + 'results/res_indNoise.pickle')
df_ind.index = df_ind.pair
df_lv = pd.read_pickle(DIR + 'results/res_indNoiseLV.pickle')
df_lv.index = df_lv.pair

# centroid or optimal decoder
val = 'dp_opt'  
ms = 20

# plot decoding performance for each dataset, for the following comparisons:
#   catch vs. target
#   reference vs. target
#   target vs. target
#   reference vs. reference
mask = (~df.tdr_overall) & (~df.pca)
category_masks = [df.cat_tar, df.ref_tar, df.tar_tar, df.ref_ref]
category_strs = ['Catch vs. Target', 'Reference vs. Target', 'Target vs. Target', 'Reference vs. Reference']
data = [df, df_psth, df_ind, df_lv]
data_str = ['Raw', 'psth-only', 'ind noise', 'ind noise + lv']

f, ax = plt.subplots(4, 4, figsize=(12, 12), sharex=False, sharey=False)

for batch in [324, 325]:
    _mask1 = mask & (df.batch==batch)
    if batch == 324:
        color = 'tab:blue'
    elif batch == 325:
        color = 'tab:orange'
    for i, (c, cs) in enumerate(zip(category_masks, category_strs)):
        _mask = _mask1 & c
        for j, (d, ds) in enumerate(zip(data, data_str)):
            ax[i, j].scatter(d[_mask & ~d.active][val],
                             d[_mask & d.active][val], color=color, s=ms, edgecolor='white')
            ax[i, j].set_title(ds + '\n' + cs)
            xlims = ax[i, j].get_xlim()
            ylims = ax[i, j].get_ylim()
            ax[i, j].plot([min([xlims[0], ylims[0]]), max([xlims[1], ylims[1]])],
                          [min([xlims[0], ylims[0]]), max([xlims[1], ylims[1]])], 'grey', linestyle='--')

# get lims
xlims = ax[0, 0].get_xlim()
ylims = ax[0, 0].get_ylim()
for a in ax.flatten():
    a.set_xlabel('Passive')
    a.set_ylabel('Active')
    #a.plot([xlims[0], xlims[1]], [ylims[0], ylims[1]], 'grey', linestyle='--')

f.tight_layout()

plt.show()